"use client"

import { TooltipTrigger } from "@/components/ui/tooltip"

import { useState, useEffect, useRef, useMemo } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Switch } from "@/components/ui/switch"
import { Label } from "@/components/ui/label"
import {
  ArrowRight,
  Sparkles,
  TrendingUp,
  TrendingDown,
  Plus,
  Info,
  WalletIcon,
  BarChart3,
  LineChart,
  RefreshCw,
  Search,
  Filter,
  X,
  Eye,
  Globe,
  Smartphone,
  CreditCard,
  Building,
  ArrowUpRight,
  HelpCircle,
  Zap,
  Check,
  User,
  BarChart4,
  History,
  PiggyBank,
} from "lucide-react"
import Image from "next/image"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Tooltip, TooltipContent, TooltipProvider } from "@/components/ui/tooltip"
import { useAccount, useReadContract, useWriteContract, useWaitForTransactionReceipt } from 'wagmi'
import { ConnectWalletButton } from "@/components/wallet/connect-wallet-button"
import { motion, AnimatePresence, useInView } from "framer-motion"
import { useTheme } from "next-themes"
import { cn } from "@/lib/utils"
import { useMobile } from "@/hooks/use-mobile"
import { Progress } from "@/components/ui/progress"
import { Badge } from "@/components/ui/badge"
import { Separator } from "@/components/ui/separator"
import { ScrollArea } from "@/components/ui/scroll-area"
import Link from "next/link"
import EasyMode from "@/components/app-modes/EasyMode"
import { usePathname } from "next/navigation"
import { PeridottrollerABI } from '../../abi/PeridottrollerABI' // Adjusted path
import { PEtherABI } from '../../abi/PEtherABI' // Add PEtherABI import
import { ERC20ABI } from '../../abi/ERC20ABI' // Add ERC20ABI import
import { soneiumMinato } from '../../config/chains' // Adjusted path
import { Asset, supplyMarkets, borrowMarkets } from '../data/markets' // Import from new markets file
import { useLiveAccountData, useLiveMarketData, useLivePortfolioData } from '../hooks/useLiveData'
import type { 
  PortfolioAsset, 
  PortfolioSummary, 
  StakingPool, 
  StakingSummary, 
  OnboardingStep, 
  PaymentMethod, 
  EasyModeAction, 
  EasyModeTransaction,
  TransactionStatus
} from '../types/defi'
// Import extracted UI components
import { AnimatedCounter, MiniChart, DonutChart, AnimatedCard } from '../components/ui/ChartComponents'
import { AssetRow, AssetDetailCard } from '../components/ui/AssetComponents'

  averageApy: number // weighted average or simple average

// Sample chart data
const generateChartData = (days = 30, volatility = 0.1, uptrend = true) => {
  const data = []
  let value = 100

  for (let i = 0; i < days; i++) {
    const change = uptrend
      ? Math.random() * volatility - volatility * 0.3
      : Math.random() * volatility - volatility * 0.7

    // Ensure value doesn't become too low or negative, adjust minimum as needed
    value = Math.max(value * (1 + change), 5) // Min value of 5, for example
    data.push({ day: i, value: value })
  }

  return data
}

// Helper function for asset colors in portfolio chart
const assetColorPalette = [
  "#3b82f6", // blue-500
  "#10b981", // emerald-500
  "#f59e0b", // amber-500
  "#ec4899", // pink-500
  "#8b5cf6", // violet-500
];
let colorIndex = 0;
const assignedColors: { [key: string]: string } = {};

const getColorForAsset = (assetSymbol: string) => {
  if (!assignedColors[assetSymbol]) {
    assignedColors[assetSymbol] = assetColorPalette[colorIndex % assetColorPalette.length];
    colorIndex++;
  }
  return assignedColors[assetSymbol];
};

// Define Peridottroller address for Soneium Minato
const peridottrollerAddressSoneiumMinato = '0xB911C192ed1d6428A12F2Cf8F636B00c34e68a2a' as `0x${string}`;

// Define PERC token address for Soneium Minato
const percTokenAddressSoneiumMinato = '0x28fE679719e740D15FC60325416bB43eAc50cD15' as `0x${string}`;

// Define pToken addresses for different assets
const pTokenAddresses = {
  PERC: '0x1DCb19949fC0a68cbdAa53Cce898B60D7436b14F' as `0x${string}`,
  // Add more pToken addresses as they become available
} as const;

// Demo data constants
const DEMO_DATA = {
  totalSupplied: 15423.82,
  totalBorrowed: 4971.50,
  netAPY: 3,
  borrowLimitUsed: 64,
  portfolioSummary: {
    totalValue: 55873.21,
    change24hValue: 1234.56,
    change24hPercentage: 2.25,
  },
  portfolioAssets: [
    { id: "sol", name: "Solana", symbol: "SOL", icon: "/tokenimages/app/solana-sol-logo.svg", amount: 150.5, price: 148.93, value: 22413.96, allocation: 40.11, change24h: 4.78 },
    { id: "pdt", name: "Peridot", symbol: "PDT", icon: "/logo.svg", amount: 1200.0, price: 14.86, value: 17832.00, allocation: 31.91, change24h: 7.21 },
    { id: "eth", name: "Ether", symbol: "ETH", icon: "/tokenimages/app/ethereum-eth-logo.svg", amount: 3.0, price: 3521.48, value: 10564.44, allocation: 18.91, change24h: 2.34 },
    { id: "usdc", name: "USD Coin", symbol: "USDC", icon: "/tokenimages/app/usd-coin-usdc-logo.svg", amount: 5062.81, price: 1.00, value: 5062.81, allocation: 9.06, change24h: 0.01 },
  ],
  stakingSummary: {
    totalStakedValue: 25340.75,
    totalRewardsValue: 672.11,
    averageApy: 9.75,
  },
  stakingPools: [
    { id: "pdt-stake", assetName: "Peridot", assetSymbol: "PDT", assetIcon: "/logo.svg", apy: 12.5, totalStaked: 1500000, userStakedAmount: 800, userStakedValue: 11888, rewardsEarned: 25.5, rewardsEarnedValue: 378.99, lockupPeriod: "30 days" },
    { id: "sol-stake", assetName: "Solana", assetSymbol: "SOL", assetIcon: "/tokenimages/app/solana-sol-logo.svg", apy: 7.0, totalStaked: 5000000, userStakedAmount: 50, userStakedValue: 7446.5, rewardsEarned: 1.2, rewardsEarnedValue: 178.71, lockupPeriod: "Flexible" },
    { id: "usdc-lp-stake", assetName: "USDC LP", assetSymbol: "USDC-LP", assetIcon: "/tokenimages/app/usd-coin-usdc-logo.svg", apy: 9.75, totalStaked: 250000, userStakedAmount: 6000, userStakedValue: 6006.25, rewardsEarned: 115.3, rewardsEarnedValue: 115.41, lockupPeriod: "14 days"},
  ]
};

export default function AppPage() {
  const { theme } = useTheme()
  const isMobile = useMobile()
  // useAccount returns chain info including id
  const { address, isConnected, isConnecting, chain } = useAccount() 

  // State declarations first
  const [isDemoMode, setIsDemoMode] = useState(true)
  const [selectedAsset, setSelectedAsset] = useState<Asset | null>(null)
  const [isDetailSupply, setIsDetailSupply] = useState(true)
  const [isLoading, setIsLoading] = useState(false)
  const [isEasyMode, setIsEasyMode] = useState(false)
  const [showLiveModeComingSoon, setShowLiveModeComingSoon] = useState(false)
  const [focusAmountInputInModal, setFocusAmountInputInModal] = useState(false);
  const [transactionStatus, setTransactionStatus] = useState<"idle" | "pendingSignature" | "transactionPending" | "success" | "error">("idle");
  const [transactionHash, setTransactionHash] = useState<string | null>(null);

  // Data state - will be populated based on demo/live mode
  const [totalSupplied, setTotalSupplied] = useState(DEMO_DATA.totalSupplied)
  const [totalBorrowed, setTotalBorrowed] = useState(DEMO_DATA.totalBorrowed)
  const [netAPY, setNetAPY] = useState(DEMO_DATA.netAPY)
  const [borrowLimitUsed, setBorrowLimitUsed] = useState(DEMO_DATA.borrowLimitUsed)
  const [searchTerm, setSearchTerm] = useState("")
  const [supplyChartData, setSupplyChartData] = useState<Array<{day: number; value: number}>>([])
  const [borrowChartData, setBorrowChartData] = useState<Array<{day: number; value: number}>>([])
  const [activeTab, setActiveTab] = useState("markets")
  const [supplyData, setSupplyData] = useState<Asset[]>(supplyMarkets)
  const [borrowData, setBorrowData] = useState<Asset[]>(borrowMarkets)

  // Portfolio State
  const [portfolioSummary, setPortfolioSummary] = useState<PortfolioSummary>(DEMO_DATA.portfolioSummary)
  const [portfolioAssets, setPortfolioAssets] = useState<PortfolioAsset[]>(DEMO_DATA.portfolioAssets)

  // Staking State
  const [stakingSummary, setStakingSummary] = useState<StakingSummary>(DEMO_DATA.stakingSummary)
  const [stakingPools, setStakingPools] = useState<StakingPool[]>(DEMO_DATA.stakingPools)

  // Live data hooks (now that isDemoMode is declared)
  const liveAccountData = useLiveAccountData(isDemoMode, address, isConnected, chain);
  const liveMarketData = useLiveMarketData(isDemoMode, isConnected, chain);
  const livePortfolioData = useLivePortfolioData(isDemoMode, address, isConnected, chain);

  // Refs for animations
  const heroRef = useRef<HTMLDivElement>(null)
  const summaryRef = useRef<HTMLDivElement>(null)
  const marketsRef = useRef<HTMLDivElement>(null)
  const heroInView = useInView(heroRef, { once: true, amount: 0.3 })
  const summaryInView = useInView(summaryRef, { once: true, amount: 0.3 })
  const marketsInView = useInView(marketsRef, { once: true, amount: 0.2 })
  const pathname = usePathname()

  // --- START WAGMI WRITE CONTRACT HOOKS ---
  const { data: enterMarketsHash, writeContract: enterMarkets } = useWriteContract();
  const { data: exitMarketHash, writeContract: exitMarket } = useWriteContract();
  const { data: supplyEthHash, writeContract: supplyEth } = useWriteContract();
  const { data: mintPercHash, writeContract: mintPerc } = useWriteContract();
  const { data: approvePercHash, writeContract: approvePerc } = useWriteContract();

  const { isLoading: isLoadingEnterMarketsTx, isSuccess: isSuccessEnterMarketsTx } = useWaitForTransactionReceipt({
    hash: enterMarketsHash,
  });
  const { isLoading: isLoadingExitMarketTx, isSuccess: isSuccessExitMarketTx } = useWaitForTransactionReceipt({
    hash: exitMarketHash,
  });
  const { isLoading: isLoadingSupplyEthTx, isSuccess: isSuccessSupplyEthTx } = useWaitForTransactionReceipt({
    hash: supplyEthHash,
  });
  const { isLoading: isLoadingMintPercTx, isSuccess: isSuccessMintPercTx } = useWaitForTransactionReceipt({
    hash: mintPercHash,
  });
  const { isLoading: isLoadingApprovePercTx, isSuccess: isSuccessApprovePercTx } = useWaitForTransactionReceipt({
    hash: approvePercHash,
  });
  // --- END WAGMI WRITE CONTRACT HOOKS ---

  // Read getBlockNumber
  const { data: blockNumber, error: blockNumberError, isLoading: isLoadingBlockNumber } = useReadContract({
    abi: PeridottrollerABI,
    address: peridottrollerAddressSoneiumMinato,
    functionName: 'getBlockNumber',
    // Only execute if connected to Soneium Minato
    query: { enabled: isConnected && chain?.id === soneiumMinato.id }, 
  });

  // Read peridottrollerImplementation to get the actual implementation address
  const { 
    data: implementationAddress, 
    error: implementationError, 
    isLoading: isLoadingImplementation 
  } = useReadContract({
    abi: PeridottrollerABI,
    address: peridottrollerAddressSoneiumMinato,
    functionName: 'peridottrollerImplementation',
    query: { enabled: isConnected && chain?.id === soneiumMinato.id },
  });

  // Read getAccountLiquidity
  const { 
    data: accountLiquidityData, 
    error: accountLiquidityError, 
    isLoading: isLoadingAccountLiquidity,
    refetch: refetchAccountLiquidity // Added refetch function
  } = useReadContract({
    abi: PeridottrollerABI,
    address: peridottrollerAddressSoneiumMinato,
    functionName: 'getAccountLiquidity',
    args: [address as `0x${string}`], // Pass the user's address as an argument
    // Only execute if connected to Soneium Minato and address is available
    query: { enabled: isConnected && chain?.id === soneiumMinato.id && !!address },
  });

  // Read getAllMarkets
  const { 
    data: allMarkets, 
    error: allMarketsError, 
    isLoading: isLoadingAllMarkets 
  } = useReadContract({
    abi: PeridottrollerABI,
    address: peridottrollerAddressSoneiumMinato,
    functionName: 'getAllMarkets',
    query: { enabled: isConnected && chain?.id === soneiumMinato.id },
  });

  // Read oracle address
  const { 
    data: oracleAddress, 
    error: oracleError, 
    isLoading: isLoadingOracle 
  } = useReadContract({
    abi: PeridottrollerABI,
    address: peridottrollerAddressSoneiumMinato,
    functionName: 'oracle',
    query: { enabled: isConnected && chain?.id === soneiumMinato.id },
  });

  // Read market information for the PERC token
  const pTokenAddress = '0x1DCb19949fC0a68cbdAa53Cce898B60D7436b14F' as `0x${string}`;
  
  const { 
    data: marketInfo, 
    error: marketInfoError, 
    isLoading: isLoadingMarketInfo 
  } = useReadContract({
    abi: PeridottrollerABI,
    address: peridottrollerAddressSoneiumMinato,
    functionName: 'markets',
    args: [pTokenAddress],
    query: { enabled: isConnected && chain?.id === soneiumMinato.id },
  });

  // Check if user is in this market
  const { 
    data: checkMembership, 
    error: checkMembershipError, 
    isLoading: isLoadingCheckMembership 
  } = useReadContract({
    abi: PeridottrollerABI,
    address: peridottrollerAddressSoneiumMinato,
    functionName: 'checkMembership',
    args: [address as `0x${string}`, pTokenAddress],
    query: { enabled: isConnected && chain?.id === soneiumMinato.id && !!address },
  });

  // Get user's assets in the protocol
  const { 
    data: assetsIn, 
    error: assetsInError, 
    isLoading: isLoadingAssetsIn 
  } = useReadContract({
    abi: PeridottrollerABI,
    address: peridottrollerAddressSoneiumMinato,
    functionName: 'getAssetsIn',
    args: [address as `0x${string}`],
    query: { enabled: isConnected && chain?.id === soneiumMinato.id && !!address },
  });

  // Read PERC token balance
  const { 
    data: percBalance, 
    error: percBalanceError, 
    isLoading: isLoadingPercBalance,
    refetch: refetchPercBalance
  } = useReadContract({
    abi: ERC20ABI,
    address: percTokenAddressSoneiumMinato,
    functionName: 'balanceOf',
    args: [address as `0x${string}`],
    query: { enabled: isConnected && chain?.id === soneiumMinato.id && !!address },
  });

  // Read PERC token allowance for pPERC contract
  const { 
    data: percAllowance, 
    error: percAllowanceError, 
    isLoading: isLoadingPercAllowance,
    refetch: refetchPercAllowance
  } = useReadContract({
    abi: ERC20ABI,
    address: percTokenAddressSoneiumMinato,
    functionName: 'allowance',
    args: [address as `0x${string}`, pTokenAddress],
    query: { enabled: isConnected && chain?.id === soneiumMinato.id && !!address },
  });

  // Data switching logic: Use live data when not in demo mode, otherwise use demo data
  useEffect(() => {
    if (!isDemoMode && liveAccountData) {
      // Update state with live data
      setTotalSupplied(liveAccountData.totalSupplied);
      setTotalBorrowed(liveAccountData.totalBorrowed);
      setNetAPY(liveAccountData.netAPY);
      setBorrowLimitUsed(liveAccountData.borrowLimitUsed);
    } else if (isDemoMode) {
      // Reset to demo data when switching back to demo mode
      setTotalSupplied(DEMO_DATA.totalSupplied);
      setTotalBorrowed(DEMO_DATA.totalBorrowed);
      setNetAPY(DEMO_DATA.netAPY);
      setBorrowLimitUsed(DEMO_DATA.borrowLimitUsed);
    }
  }, [isDemoMode, liveAccountData]);

  // Update market data based on mode
  useEffect(() => {
    if (!isDemoMode && liveMarketData) {
      setSupplyData(liveMarketData.supplyMarkets);
      setBorrowData(liveMarketData.borrowMarkets);
    } else if (isDemoMode) {
      setSupplyData(supplyMarkets);
      setBorrowData(borrowMarkets);
    }
  }, [isDemoMode, liveMarketData]);

  // Update portfolio data based on mode
  useEffect(() => {
    if (!isDemoMode && livePortfolioData) {
      setPortfolioSummary(livePortfolioData.summary);
      setPortfolioAssets(livePortfolioData.assets);
    } else if (isDemoMode) {
      setPortfolioSummary(DEMO_DATA.portfolioSummary);
      setPortfolioAssets(DEMO_DATA.portfolioAssets);
    }
  }, [isDemoMode, livePortfolioData]);

  useEffect(() => {
    if (accountLiquidityData) {
      console.log("Raw accountLiquidityData:", {
        errorCode: accountLiquidityData[0].toString(),
        liquidity: accountLiquidityData[1].toString(),
        shortfall: accountLiquidityData[2].toString(),
      });
    }
    if (accountLiquidityError) {
      console.error("accountLiquidityError:", accountLiquidityError);
    }
  }, [accountLiquidityData, accountLiquidityError]);

  useEffect(() => {
    // Update Easy Mode based on URL
    setIsEasyMode(pathname.includes("/easy"))
  }, [pathname])

  useEffect(() => {
    // Simulate loading data on mount
    setIsLoading(true)
    setTimeout(() => {
      setSupplyChartData(generateChartData(30, 0.05, true))
      setBorrowChartData(generateChartData(30, 0.08, true))
      setIsLoading(false)
    }, 1500)
  }, [])

  const handleRefresh = () => {
    setIsLoading(true)
    // Simulate refreshing data - using original demo values/logic if possible
    setTimeout(() => {
      setSupplyData([...supplyMarkets].sort(() => Math.random() - 0.5))
      setBorrowData([...borrowMarkets].sort(() => Math.random() - 0.5))
      setSupplyChartData(generateChartData(30, 0.05, Math.random() > 0.5))
      setBorrowChartData(generateChartData(30, 0.08, Math.random() > 0.5))
      // Update state with random values for demo or fetch real data
      setTotalSupplied(15000 + Math.random() * 1000)
      setTotalBorrowed(4000 + Math.random() * 1000)
      setNetAPY(2 + Math.random() * 2)
      setBorrowLimitUsed(50 + Math.random() * 30)
      setIsLoading(false)
    }, 1000)
  }

  const handleOpenDetailModal = (assetForModal: Asset, isSupplyView: boolean) => {
    setSelectedAsset(assetForModal);
    setIsDetailSupply(isSupplyView);
    setFocusAmountInputInModal(false);
  }

  const handleQuickSupplyClick = (clickedAsset: Asset) => {
    setSelectedAsset(clickedAsset)
    setIsDetailSupply(true)
    setFocusAmountInputInModal(true)
  }

  const handleCloseAssetDetail = () => {
    setSelectedAsset(null)
    setFocusAmountInputInModal(false)
  }

  const toggleEasyMode = () => {
    setIsEasyMode(!isEasyMode)
  }

  const toggleDemoMode = () => {
    if (isDemoMode) {
      setShowLiveModeComingSoon(true)
    } else {
      setIsDemoMode(true)
      setShowLiveModeComingSoon(false)
    }
  }

  const handleConfirmSwitchToLiveMode = () => {
    setIsDemoMode(false)
    setShowLiveModeComingSoon(false)
  }

  const handleCancelSwitchToLiveMode = () => {
    setShowLiveModeComingSoon(false)
  }

  // Helper function to calculate borrow limit and usage
  const calculateBorrowLimitInfo = (currentSupplyData: Asset[], currentTotalBorrowed: number) => {
    let totalCollateralValue = 0;
    currentSupplyData.forEach(asset => {
      if (asset.collateral) {
        const suppliedAmount = parseFloat(asset.wallet.split(" ")[0]) || 0;
        const price = asset.price || 0;
        // Using a fixed 75% collateral factor for all assets in demo mode
        totalCollateralValue += suppliedAmount * price * 0.75;
      }
    });

    if (totalCollateralValue <= 0) {
      return { maxBorrowable: 0, newBorrowLimitUsedPercentage: currentTotalBorrowed > 0 ? 100 : 0 }; // If no collateral, but borrowed, show 100% used or 0 if nothing borrowed
    }

    const newBorrowLimitUsedPercentage = Math.min((currentTotalBorrowed / totalCollateralValue) * 100, 100);
    return { maxBorrowable: totalCollateralValue, newBorrowLimitUsedPercentage };
  };

  const handleToggleCollateral = (assetId: string) => {
    if (isDemoMode) {
      setSupplyData((prevData) =>
        prevData.map((asset) =>
          asset.id === assetId
            ? { ...asset, collateral: !asset.collateral }
            : asset
        )
      );
      return;
    }

    const assetToToggle = supplyData.find(asset => asset.id === assetId);
    if (!assetToToggle) return;

    // Optimistically update UI first
    const updatedSupplyData = supplyData.map(asset => {
      if (asset.id === assetId && typeof asset.collateral === 'boolean') {
        const suppliedAmount = parseFloat(asset.wallet.split(" ")[0]) || 0;
        if (suppliedAmount > 0) {
          return { ...asset, collateral: !asset.collateral };
        }
      }
      return asset;
    });
    setSupplyData(updatedSupplyData);

    // On-chain interaction
    if (!isDemoMode && assetToToggle.pTokenAddress && address && chain) {
      if (assetToToggle.collateral === false) { 
        console.log(`Entering market with pToken: ${assetToToggle.pTokenAddress}`);
        enterMarkets({
          address: peridottrollerAddressSoneiumMinato,
          abi: PeridottrollerABI,
          functionName: 'enterMarkets',
          args: [[assetToToggle.pTokenAddress]],
          chain: chain,
          account: address,
        });
      } else { 
        console.log(`Exiting market with pToken: ${assetToToggle.pTokenAddress}`);
        exitMarket({
          address: peridottrollerAddressSoneiumMinato,
          abi: PeridottrollerABI,
          functionName: 'exitMarket',
          args: [assetToToggle.pTokenAddress],
          chain: chain,
          account: address,
        });
      }
    } else if (!isDemoMode && !assetToToggle.pTokenAddress) {
      console.warn(`No pTokenAddress defined for asset ${assetToToggle.name} to toggle collateral on-chain.`);
    } else if (!isDemoMode && (!address || !chain)) {
      console.warn("Wallet not connected or chain undefined, cannot toggle collateral on-chain.");
    }

    const { newBorrowLimitUsedPercentage } = calculateBorrowLimitInfo(updatedSupplyData, totalBorrowed);
    setBorrowLimitUsed(newBorrowLimitUsedPercentage);
  };

  // Refetch account liquidity when enter/exit market transactions succeed
  useEffect(() => {
    if (isSuccessEnterMarketsTx || isSuccessExitMarketTx) {
      console.log("Collateral transaction successful, refetching account liquidity...");
      refetchAccountLiquidity?.();
    }
  }, [isSuccessEnterMarketsTx, isSuccessExitMarketTx, refetchAccountLiquidity]);

  const handleTransaction = (
    targetAsset: Asset,
    numericAmount: number,
    type: "supply" | "borrow"
  ) => {
    console.log(`Handling ${type} for ${targetAsset.name}, Amount: ${numericAmount}`)
    if (isDemoMode) {
      // Simulate transaction in demo mode
      setTransactionStatus("pendingSignature");
      setTimeout(() => {
        setTransactionStatus("transactionPending");
        setTimeout(() => {
          setTransactionStatus("success");
          setTransactionHash("0xDemoTransactionHash")
          // Update balances or other relevant data
          if (type === "supply") {
            setSupplyData(prev => prev.map(asset => asset.id === targetAsset.id ? { ...asset, wallet: `${parseFloat(asset.wallet) + numericAmount} ${asset.symbol}` } : asset));
          } else {
            // Similar update for borrow if needed
          }
          setTimeout(() => setTransactionStatus("idle"), 3000);
        }, 2000);
      }, 1000);
      return;
    }

    if (!address || !chain) {
      console.error("Wallet not connected or chain not identified for transaction");
      setTransactionStatus("error");
      // Optionally, show a message to the user to connect their wallet
      return;
    }

    setTransactionStatus("pendingSignature");

    if (type === "supply") {
      if (targetAsset.symbol === "ETH" && targetAsset.pTokenAddress) {
        supplyEth({
          address: targetAsset.pTokenAddress,
          abi: PEtherABI,
          functionName: 'mint',
          value: BigInt(Math.round(numericAmount * 1e18)), // Ensure it's an integer, then convert to BigInt
          chain: chain,
          account: address,
        }, {
          onSuccess: (data) => {
            setTransactionHash(data);
            setTransactionStatus("transactionPending");
            console.log(`ETH Supply submitted: ${data}`);
          },
          onError: (err) => {
            console.error("ETH Supply error", err);
            setTransactionStatus("error");
          },
        });
      } else if (targetAsset.pTokenAddress) {
        // Handle ERC20 supply here if needed in the future
        console.log(`Supply ${targetAsset.symbol} using its pToken: ${targetAsset.pTokenAddress}`);
        // Example:
        // writeContract({
        //   address: targetAsset.pTokenAddress, // This would be the pToken address for the asset
        //   abi: PTokenABI, // Assuming a generic PTokenABI for minting ERC20 pTokens
        //   functionName: 'mint', // Or 'supply', depending on the PToken contract
        //   args: [BigInt(numericAmount * 10**targetAsset.decimals)], // Adjust decimals based on asset
        //   chain: chain,
        //   account: address,
        // }, { ... onSuccess, onError ... })
        setTransactionStatus("error"); // Placeholder until ERC20 supply is implemented
        console.error("ERC20 supply not implemented yet for this asset.");

      } else {
        console.error(`pTokenAddress not defined for ${targetAsset.name} to supply.`);
        setTransactionStatus("error");
      }
    } else if (type === "borrow") {
      // Handle borrow transaction
      console.log(`Borrow ${targetAsset.symbol}`);
      // ... implementation for borrow ...
      setTransactionStatus("error"); // Placeholder
      console.error("Borrow functionality not implemented yet.");
    }
  }

  // Effect to refetch account liquidity after successful enter/exit market or supply
  useEffect(() => {
    if (isSuccessEnterMarketsTx || isSuccessExitMarketTx || isSuccessSupplyEthTx) {
      console.log("Enter/Exit market or Supply transaction successful, refetching account liquidity.");
      refetchAccountLiquidity();
      // Potentially refetch other relevant balances or user data here
      if (isSuccessEnterMarketsTx) {
        // Example: update wallet balance display for ETH
        // This would ideally come from a balance fetch hook
        console.log("ETH supply successful, consider updating ETH wallet balance display.");
      }

    }
  }, [isSuccessEnterMarketsTx, isSuccessExitMarketTx, isSuccessSupplyEthTx, refetchAccountLiquidity]);

  const filteredSupplyData = supplyData.filter(
    (asset) =>
      asset.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      asset.symbol.toLowerCase().includes(searchTerm.toLowerCase()),
  )

  const filteredBorrowData = borrowData.filter(
    (asset) =>
      asset.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      asset.symbol.toLowerCase().includes(searchTerm.toLowerCase()),
  )

  // If Easy Mode is enabled, render it and return early
  if (isEasyMode) {
    return <EasyMode onExitEasyMode={toggleEasyMode} />;
  }

  // Pro Mode Return Statement
  return (
    <TooltipProvider>
      <div className={cn("container mx-auto px-4 md:px-6 py-8 transition-all duration-300", { "blur-sm": isLoading })}>
        <AnimatePresence>
          {isLoading && (
             <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="fixed inset-0 bg-background/80 backdrop-blur-sm flex items-center justify-center z-50"
            >
              <RefreshCw className="h-10 w-10 animate-spin text-primary" />
            </motion.div>
          )}
        </AnimatePresence>

        {/* Header section with Title and Easy Mode Toggle */} 
        <div className="flex flex-col md:flex-row md:items-center justify-between gap-2 mb-4">
          <div>
             {/* Keep Title if desired */}
             <h1 className="text-2xl md:text-3xl font-bold">Peridot DeFi</h1>
             <p className="text-sm text-muted-foreground">Cross-chain lending & borrowing</p>
             { /* Display Block Number */}
             {isConnected && chain?.id === soneiumMinato.id && (
              <div className="mt-2 p-2 border rounded-md bg-background">
                <p className="text-xs text-muted-foreground">Soneium Minato Status:</p>
                {isLoadingBlockNumber && <p className="text-sm">Fetching block number...</p>}
                {blockNumberError && <p className="text-sm text-red-500">Error fetching block number: {blockNumberError.shortMessage || blockNumberError.message}</p>}
                {blockNumber && <p className="text-sm">Current Block: {blockNumber.toString()}</p>}
              </div>
            )}
            {isConnected && chain?.id !== soneiumMinato.id && (
              <div className="mt-2 p-2 border rounded-md bg-amber-500/10">
                <p className="text-sm text-amber-700">Please switch to Soneium Minato network in your wallet to see block number.</p>
              </div>
            )}
            {/* Display Account Liquidity */}
            {isConnected && chain?.id === soneiumMinato.id && address && (
              <div className="mt-2 p-2 border rounded-md bg-background">
                <p className="text-xs text-muted-foreground">Account Liquidity:</p>
                {isLoadingAccountLiquidity && <p className="text-sm">Fetching account liquidity...</p>}
                {accountLiquidityError && <p className="text-sm text-red-500">Error fetching account liquidity: {accountLiquidityError.shortMessage || accountLiquidityError.message}</p>}
                {accountLiquidityData && (
                  <div>
                    {/* The getAccountLiquidity function returns three values:
                        1. Error code (0 if no error)
                        2. Liquidity (in USD)
                        3. Shortfall (in USD) 
                        We will display the liquidity. You might want to handle errors or shortfall differently.
                    */}
                    <p className="text-xl md:text-2xl font-bold">
                      <AnimatedCounter value={parseFloat((Number(accountLiquidityData[1]) / 1e18).toFixed(2))} prefix="$" duration={0.8} />
                    </p> 
                    {/* Assuming liquidity is returned in 18 decimal places, adjust if necessary */}
                    {Number(accountLiquidityData[0]) !== 0 && <p className="text-xs text-red-500">Error Code: {accountLiquidityData[0].toString()}</p>}
                    {Number(accountLiquidityData[2]) > 0 && <p className="text-xs text-orange-500">Shortfall: ${(Number(accountLiquidityData[2]) / 1e18).toFixed(2)}</p>}
                  </div>
                )}
              </div>
            )}
          </div>
          <div className="flex items-center gap-2 mt-2 md:mt-0">
            {/* Demo Mode Toggle Button */}
            <Tooltip>
              <TooltipTrigger asChild>
                <div className="flex items-center gap-1 border rounded-xl px-3 py-1.5 bg-background relative">
                  <Label htmlFor="demo-mode-switch" className="text-xs cursor-pointer">Demo Mode</Label>
                  <Switch id="demo-mode-switch" checked={isDemoMode} onCheckedChange={toggleDemoMode} />
                  <HelpCircle className="h-3 w-3 text-muted-foreground ml-1" />
                </div>
              </TooltipTrigger>
              <TooltipContent><p className="max-w-xs text-xs">Toggle Demo Mode. Live data is coming soon!</p></TooltipContent>
            </Tooltip>
             {/* Easy Mode Toggle Button */} 
            <Tooltip>
              <TooltipTrigger asChild>
                 <div className="flex items-center gap-1 border rounded-xl px-3 py-1.5 bg-background relative">
                   <Label htmlFor="easy-mode-switch" className="text-xs cursor-pointer">Easy Mode</Label>
                   <Switch id="easy-mode-switch" checked={isEasyMode} onCheckedChange={toggleEasyMode} />
                   <HelpCircle className="h-3 w-3 text-muted-foreground ml-1" />
                 </div>
               </TooltipTrigger>
               <TooltipContent><p className="max-w-xs text-xs">Switch to Easy Mode for a simplified interface.</p></TooltipContent>
            </Tooltip>
             {/* Refresh Button */}
            <Button variant="outline" size="sm" onClick={handleRefresh} className="h-8 px-3">
               <RefreshCw className="h-3.5 w-3.5 mr-1" /> <span className="text-xs">Refresh</span>
             </Button>
             {/* Conditionally show Connect Button based on path if needed, or always show */}
            <ConnectWalletButton className="w-full md:w-auto" /> 
          </div>
        </div>

        {/* Summary Cards Section - Restoring Structure */} 
        <div className="grid grid-cols-2 md:grid-cols-3 gap-2 md:gap-3 mb-3">
          {/* Supply Balance Card */}
          <Card className="bg-card border-border/50 overflow-hidden shadow-sm">
            <CardHeader className="p-3 pb-0">
              <CardTitle className="text-sm text-green-400 flex items-center justify-between">
                Supply Balance
                 {/* Add refresh icon if needed */}
                 <Button variant="ghost" size="icon" className="h-6 w-6 -mr-1 -mt-1">
                  <RefreshCw className="h-3 w-3" /> 
                </Button>
              </CardTitle>
            </CardHeader>
            <CardContent className="p-3 pt-1">
              <div className="text-xl md:text-2xl font-bold">
                <AnimatedCounter value={totalSupplied} prefix="$" duration={0.8} />
              </div>
              <div className="flex items-center text-xs text-green-400">
                <TrendingUp className="h-3 w-3 mr-1" /> +2.14% last 24h
              </div>
            </CardContent>
          </Card>

          {/* Borrow Balance Card */} 
          <Card className="bg-card border-border/50 overflow-hidden shadow-sm">
             <CardHeader className="p-3 pb-0">
              <CardTitle className="text-sm text-green-400 flex items-center justify-between">
                Borrow Balance
                 <Button variant="ghost" size="icon" className="h-6 w-6 -mr-1 -mt-1">
                  <RefreshCw className="h-3 w-3" /> 
                </Button>
              </CardTitle>
            </CardHeader>
            <CardContent className="p-3 pt-1">
               <div className="text-xl md:text-2xl font-bold">
                 <AnimatedCounter value={totalBorrowed} prefix="$" duration={0.8} />
               </div>
               <div className="flex items-center text-xs text-green-400">
                 +0.89% last 24h <TrendingUp className="h-3 w-3 ml-1" />
               </div>
             </CardContent>
          </Card>

          {/* Net APY Card */} 
          <Card className="col-span-2 md:col-span-1 bg-card border-border/50 overflow-hidden shadow-sm">
             <CardHeader className="p-3 pb-0 md:pb-0 md:text-center">
              <CardTitle className="text-sm flex items-center md:justify-center">
                Net APY
                 <Tooltip>
                   <TooltipTrigger asChild>
                     <span className="ml-1 cursor-pointer"><HelpCircle className="h-3 w-3 text-text/40" /></span>
                   </TooltipTrigger>
                   <TooltipContent side="top"><p className="text-xs max-w-[200px]">Net annual percentage yield.</p></TooltipContent>
                 </Tooltip>
              </CardTitle>
            </CardHeader>
            <CardContent className="p-3 pt-1 md:pt-0 flex flex-col items-center">
              <div className="text-xl font-bold mb-1">{netAPY.toFixed(1)}%</div>
              <Progress value={(netAPY / 10) * 100} className="h-1 w-24 bg-green-900/30 [&>div]:bg-green-500" />
              {/* Supply/Borrow APY Breakdown */}
              <div className="mt-2 grid grid-cols-2 gap-1 w-full">
                 <div className="flex flex-col items-center bg-green-500/10 rounded p-1">
                   <span className="text-xs text-green-500 font-medium">Supply APY</span>
                   <span className="text-sm font-bold">5.2%</span> 
                 </div>
                 <div className="flex flex-col items-center bg-amber-500/10 rounded p-1">
                   <span className="text-xs text-amber-500 font-medium">Borrow APY</span>
                   <span className="text-sm font-bold">2.1%</span> 
                 </div>
               </div>
            </CardContent>
          </Card>

          {/* Account Liquidity Card - New Card Added Here */}
          <Card className="bg-card border-border/50 overflow-hidden shadow-sm">
            <CardHeader className="p-3 pb-0">
              <CardTitle className="text-sm text-blue-400 flex items-center justify-between">
                Account Liquidity
                <Button variant="ghost" size="icon" className="h-6 w-6 -mr-1 -mt-1">
                  <RefreshCw className="h-3 w-3" />
                </Button>
              </CardTitle>
            </CardHeader>
            <CardContent className="p-3 pt-1">
              {isLoadingAccountLiquidity && <p className="text-sm">Loading...</p>}
              {accountLiquidityError && <p className="text-sm text-red-500">Error</p>}
              {accountLiquidityData && (
                <div>
                  <div className="text-xl md:text-2xl font-bold">
                    {/* Liquidity is the second value in the returned array, convert from Wei (18 decimals) */}
                    <AnimatedCounter value={parseFloat((Number(accountLiquidityData[1]) / 1e18).toFixed(2))} prefix="$" duration={0.8} />
                  </div>
                  {Number(accountLiquidityData[0]) !== 0 && (
                    <div className="text-xs text-red-500 mt-1">
                      Error Code: {accountLiquidityData[0].toString()}
                    </div>
                  )}
                  {Number(accountLiquidityData[2]) > 0 && (
                     <div className="text-xs text-orange-500 mt-1">
                      Shortfall: ${(Number(accountLiquidityData[2]) / 1e18).toFixed(2)}
                    </div>
                  )}
                   <div className="flex items-center text-xs text-blue-400 mt-1">
                     {/* Placeholder for change, can be made dynamic later */}
                     <TrendingUp className="h-3 w-3 mr-1" /> Healthy
                   </div>
                </div>
              )}
              {!isLoadingAccountLiquidity && !accountLiquidityError && !accountLiquidityData && isConnected && chain?.id === soneiumMinato.id && address && (
                <p className="text-sm text-muted-foreground">No liquidity data.</p>
              )}
              {(!isConnected || (chain?.id !== soneiumMinato.id) || !address) && (
                <p className="text-xs text-muted-foreground">Connect wallet to Soneium Minato to view liquidity.</p>
              )}
            </CardContent>
          </Card>
        </div>

        {/* Borrow Limit Progress Bar */} 
        <Card className="bg-card border-border/50 overflow-hidden shadow-sm mb-4">
          <div className="p-3">
             <div className="flex items-center justify-between mb-1">
              <div className="flex items-center">
                <h3 className="text-sm font-medium">Borrow Limit</h3>
                 <Tooltip>
                   <TooltipTrigger asChild>
                     <span className="ml-1 cursor-pointer"><HelpCircle className="h-3 w-3 text-text/40" /></span>
                   </TooltipTrigger>
                   <TooltipContent side="right"><p className="text-xs max-w-[200px]">Limit based on collateral.</p></TooltipContent>
                 </Tooltip>
              </div>
              <span className="text-xs font-medium">{borrowLimitUsed.toFixed(0)}% Used</span>
            </div>
             <Progress value={borrowLimitUsed} className="h-1.5 w-full bg-green-900/30 [&>div]:bg-green-500" />
             <div className="flex justify-between text-xs text-text/40 mt-1">
              <span>0%</span>
              <span>80%</span>
              <span>100%</span>
            </div>
          </div>
        </Card>

        {/* Markets Section with Tabs */}
        <Tabs defaultValue="markets" value={activeTab} onValueChange={setActiveTab} className="w-full">
          <TabsList className="grid grid-cols-4 w-full md:w-auto mb-4">
            <TabsTrigger value="markets">Markets</TabsTrigger>
            <TabsTrigger value="portfolio">Portfolio</TabsTrigger>
            <TabsTrigger value="stake">Stake</TabsTrigger>
            <TabsTrigger value="debug">Debug</TabsTrigger>
          </TabsList>

          {/* Markets Tab Content */} 
          <TabsContent value="markets">
             {/* Search and Filter Bar */} 
             <div className="flex items-center gap-4 mb-4">
               <div className="relative flex-grow">
                 <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                 <input 
                   type="text"
                   placeholder="Search assets..."
                   value={searchTerm}
                   onChange={(e) => setSearchTerm(e.target.value)}
                   className="pl-10 pr-4 py-2 w-full rounded-md border bg-background text-sm focus:outline-none focus:ring-1 focus:ring-ring"
                 />
               </div>
               {/* Maybe add filter button back if needed */}
             </div>
             
             {/* Apply grid layout only on medium screens and up */}
             <div className="md:grid md:grid-cols-2 gap-6">
               {/* Supply Markets Card */}
              <AnimatedCard>
                <Card>
                  <CardHeader className="pb-2">
                    <div className="flex items-center justify-between">
                      <CardTitle>Supply Markets</CardTitle>
                      <div className="flex gap-2">
                        {/* Add Filter/Search Icons if needed */}
                        <TooltipProvider>
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <Button variant="outline" size="icon" className="h-8 w-8">
                                <Filter className="h-4 w-4" />
                              </Button>
                            </TooltipTrigger>
                            <TooltipContent><p>Filter</p></TooltipContent>
                          </Tooltip>
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <Button variant="outline" size="icon" className="h-8 w-8">
                                <Search className="h-4 w-4" />
                              </Button>
                            </TooltipTrigger>
                            <TooltipContent><p>Search</p></TooltipContent>
                          </Tooltip>
                        </TooltipProvider>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent className="p-0">
                    {/* Add scroll wrapper for the table */}
                    <div className="overflow-x-auto">
                      <Table className="min-w-[600px]">
                        <TableHeader>
                          <TableRow>
                             {/* Add whitespace-nowrap to prevent wrapping */}
                            <TableHead className="w-[40%] whitespace-nowrap">Asset</TableHead>
                            <TableHead className="w-[20%] text-right whitespace-nowrap">APY</TableHead>
                            <TableHead className="w-[20%] text-right whitespace-nowrap">Wallet</TableHead>
                            <TableHead className="w-[20%] text-right whitespace-nowrap">Collateral</TableHead>
                            <TableHead className="w-[0%]"></TableHead>
                          </TableRow>
                        </TableHeader>
                        <TableBody>
                          {filteredSupplyData.map((asset) => (
                            <AssetRow
                              key={asset.id}
                              asset={asset}
                              isSupply={true}
                              onOpenDetailModal={handleOpenDetailModal}
                              onToggleCollateral={handleToggleCollateral}
                              isDemoMode={isDemoMode}
                              onQuickSupplyClick={handleQuickSupplyClick}
                            />
                          ))}
                        </TableBody>
                      </Table>
                    </div>
                  </CardContent>
                </Card>
              </AnimatedCard>

               {/* Borrow Markets Card */}
              <AnimatedCard delay={0.1}> 
                 <Card>
                   <CardHeader className="pb-2">
                     <div className="flex items-center justify-between">
                       <CardTitle>Borrow Markets</CardTitle>
                       <div className="flex gap-2">
                         {/* Add Filter/Search Icons if needed */}
                         <TooltipProvider>
                           <Tooltip>
                            <TooltipTrigger asChild>
                              <Button variant="outline" size="icon" className="h-8 w-8">
                                <Filter className="h-4 w-4" />
                              </Button>
                            </TooltipTrigger>
                            <TooltipContent><p>Filter</p></TooltipContent>
                          </Tooltip>
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <Button variant="outline" size="icon" className="h-8 w-8">
                                <Search className="h-4 w-4" />
                              </Button>
                            </TooltipTrigger>
                            <TooltipContent><p>Search</p></TooltipContent>
                          </Tooltip>
                         </TooltipProvider>
                       </div>
                     </div>
                   </CardHeader>
                   <CardContent className="p-0">
                     {/* Add scroll wrapper for the table */}
                     <div className="overflow-x-auto">
                       <Table className="min-w-[600px]">
                         <TableHeader>
                           <TableRow>
                             {/* Add whitespace-nowrap to prevent wrapping */}
                             <TableHead className="w-[40%] whitespace-nowrap">Asset</TableHead>
                             <TableHead className="w-[20%] text-right whitespace-nowrap">APY</TableHead>
                             <TableHead className="w-[20%] text-right whitespace-nowrap">Liquidity</TableHead>
                             <TableHead className="w-[20%] whitespace-nowrap"></TableHead> 
                             <TableHead className="w-[0%]"></TableHead>
                           </TableRow>
                         </TableHeader>
                         <TableBody>
                           {filteredBorrowData.map((asset) => (
                             <AssetRow
                               key={asset.id}
                               asset={asset}
                               isSupply={false}
                               onOpenDetailModal={handleOpenDetailModal}
                               isDemoMode={isDemoMode}
                             />
                           ))}
                         </TableBody>
                       </Table>
                     </div>
                   </CardContent>
                 </Card>
               </AnimatedCard>
             </div>
           </TabsContent>

           {/* Placeholder Content for other tabs */}
          <TabsContent value="portfolio">
            <AnimatedCard>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                <Card>
                  <CardHeader className="pb-2">
                    <CardTitle className="text-sm font-medium text-muted-foreground">Total Portfolio Value</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="text-3xl font-bold">
                      <AnimatedCounter value={portfolioSummary.totalValue} prefix="$" duration={1} />
                    </div>
                    <p className={cn(
                      "text-xs mt-1",
                      portfolioSummary.change24hValue >= 0 ? "text-green-500" : "text-red-500"
                    )}>
                      {portfolioSummary.change24hValue >= 0 ? "+" : ""}
                      <AnimatedCounter value={Math.abs(parseFloat(portfolioSummary.change24hValue.toFixed(2)))} prefix="$" duration={1} /> 
                      ({portfolioSummary.change24hPercentage.toFixed(2)}%) 24h
                    </p>
                  </CardContent>
                </Card>
                <Card className="md:col-span-2">
                  <CardHeader className="pb-2">
                    <CardTitle className="text-sm font-medium text-muted-foreground">Asset Allocation</CardTitle>
                  </CardHeader>
                  <CardContent className="flex flex-col sm:flex-row items-center justify-around pt-4">
                    {/* Simplified Donut Chart usage: Show for the largest asset or overall health metric */}
                    {/* For a true multi-segment chart, the DonutChart component would need an update */}
                    {/* For now, let's show the allocation of the top asset */}
                    {portfolioAssets.length > 0 && 
                        <DonutChart 
                            value={portfolioAssets[0].allocation} // Show allocation of the first (largest) asset
                            size={120} 
                            strokeWidth={12}
                            color={getColorForAsset(portfolioAssets[0].symbol)}
                        />
                    }
                    <div className="space-y-1 mt-3 sm:mt-0 sm:ml-4">
                      {portfolioAssets.slice(0, 4).map(asset => (
                        <div key={asset.id} className="flex items-center text-sm">
                          <span className="w-3 h-3 rounded-full mr-2 flex-shrink-0" style={{ backgroundColor: getColorForAsset(asset.symbol) }}></span>
                          <span className="font-medium mr-1">{asset.symbol}:</span> 
                          <span className="text-muted-foreground">{asset.allocation.toFixed(1)}%</span>
                        </div>
                      ))}
                      {portfolioAssets.length > 4 && (
                        <div className="text-xs text-muted-foreground pt-1">
                          + {portfolioAssets.length - 4} more
                        </div>
                      )}
                    </div>
                  </CardContent>
                </Card>
              </div>
            </AnimatedCard>
            <AnimatedCard delay={0.1}>
              <Card>
                <CardHeader>
                  <CardTitle>My Assets</CardTitle>
                </CardHeader>
                <CardContent className="p-0">
                  <div className="overflow-x-auto">
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead className="w-[30%]">Asset</TableHead>
                          <TableHead className="text-right">Price</TableHead>
                          <TableHead className="text-right">Amount</TableHead>
                          <TableHead className="text-right">Value</TableHead>
                          <TableHead className="text-right w-[15%]">Allocation</TableHead>
                          <TableHead className="text-right w-[10%]">24h</TableHead>
                          <TableHead className="w-[5%]"></TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {portfolioAssets.map((asset) => (
                          <TableRow key={asset.id} className="group">
                            <TableCell>
                              <div className="flex items-center space-x-3">
                                <Image src={asset.icon} alt={asset.name} width={28} height={28} className="rounded-full" />
                                <div>
                                  <div className="font-medium">{asset.name}</div>
                                  <div className="text-xs text-muted-foreground">{asset.symbol}</div>
                                </div>
                              </div>
                            </TableCell>
                            <TableCell className="text-right">${asset.price.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</TableCell>
                            <TableCell className="text-right">{asset.amount.toLocaleString()}</TableCell>
                            <TableCell className="text-right font-medium">${asset.value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</TableCell>
                            <TableCell className="text-right">
                              <div className="flex items-center justify-end space-x-2">
                                <span>{asset.allocation.toFixed(1)}%</span>
                                <Progress value={asset.allocation} className="h-1.5 w-16 bg-primary/20 [&>div]:bg-primary" />
                              </div>
                            </TableCell>
                            <TableCell className={cn(
                              "text-right",
                              asset.change24h && asset.change24h >= 0 ? "text-green-500" : "text-red-500"
                            )}>
                              {asset.change24h ? `${asset.change24h >= 0 ? "+" : ""}${asset.change24h.toFixed(2)}%` : "N/A"}
                            </TableCell>
                            <TableCell className="opacity-0 group-hover:opacity-100 transition-opacity">
                              <Button variant="ghost" size="sm" className="rounded-full h-8 w-8 p-0">
                                <TrendingUp className="h-4 w-4" /> {/* Or some other action icon */}
                              </Button>
                            </TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </div>
                </CardContent>
              </Card>
            </AnimatedCard>
          </TabsContent>

          {/* Debug Tab Content */}
          <TabsContent value="debug">
            <div className="space-y-6">
              {/* Contract Information */}
              <AnimatedCard>
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <BarChart4 className="h-5 w-5" />
                      Contract Information
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <h4 className="text-sm font-medium text-muted-foreground">Peridottroller Proxy Address</h4>
                        <div className="font-mono text-sm bg-muted p-2 rounded">
                          {peridottrollerAddressSoneiumMinato}
                        </div>
                      </div>
                      
                      <div className="space-y-2">
                        <h4 className="text-sm font-medium text-muted-foreground">Implementation Address</h4>
                        <div className="font-mono text-sm bg-muted p-2 rounded">
                          {isLoadingImplementation && "Loading..."}
                          {implementationError && <span className="text-red-500">Error: {implementationError.shortMessage}</span>}
                          {implementationAddress && String(implementationAddress)}
                          {!isLoadingImplementation && !implementationError && !implementationAddress && "Not available"}
                        </div>
                      </div>

                      <div className="space-y-2">
                        <h4 className="text-sm font-medium text-muted-foreground">Oracle Address</h4>
                        <div className="font-mono text-sm bg-muted p-2 rounded">
                          {isLoadingOracle && "Loading..."}
                          {oracleError && <span className="text-red-500">Error: {oracleError.shortMessage}</span>}
                          {oracleAddress && String(oracleAddress)}
                          {!isLoadingOracle && !oracleError && !oracleAddress && "Not available"}
                        </div>
                      </div>

                      <div className="space-y-2">
                        <h4 className="text-sm font-medium text-muted-foreground">Current Block Number</h4>
                        <div className="font-mono text-sm bg-muted p-2 rounded">
                          {isLoadingBlockNumber && "Loading..."}
                          {blockNumberError && <span className="text-red-500">Error: {blockNumberError.shortMessage}</span>}
                          {blockNumber && blockNumber.toString()}
                          {!isLoadingBlockNumber && !blockNumberError && !blockNumber && "Not available"}
                        </div>
                      </div>
                    </div>

                    {/* All Markets */}
                    <div className="space-y-2">
                      <h4 className="text-sm font-medium text-muted-foreground">All Markets</h4>
                      <div className="font-mono text-sm bg-muted p-2 rounded max-h-32 overflow-y-auto">
                        {isLoadingAllMarkets && "Loading..."}
                        {allMarketsError && <span className="text-red-500">Error: {allMarketsError.shortMessage}</span>}
                        {allMarkets && Array.isArray(allMarkets) && allMarkets.length > 0 && (
                          <div className="space-y-1">
                            {allMarkets.map((market, index) => (
                              <div key={index}>{String(market)}</div>
                            ))}
                          </div>
                        )}
                        {!isLoadingAllMarkets && !allMarketsError && (!allMarkets || !Array.isArray(allMarkets) || (Array.isArray(allMarkets) && allMarkets.length === 0)) && "No markets found"}
                      </div>
                    </div>

                    {/* PERC Market Information */}
                    <div className="space-y-2">
                      <h4 className="text-sm font-medium text-muted-foreground">PERC Market Info (0x1DCb...b14F)</h4>
                      <div className="font-mono text-sm bg-muted p-2 rounded">
                        {isLoadingMarketInfo && "Loading..."}
                        {marketInfoError && <span className="text-red-500">Error: {marketInfoError.shortMessage}</span>}
                        {marketInfo && Array.isArray(marketInfo) && (
                          <div className="space-y-1">
                            <div>Listed: {marketInfo[0] ? "Yes" : "No"}</div>
                            <div>Collateral Factor: {marketInfo[1] ? (Number(marketInfo[1]) / 1e18 * 100).toFixed(2) + "%" : "0%"}</div>
                            <div>Is Peridoted: {marketInfo[2] ? "Yes" : "No"}</div>
                            <div className="text-amber-500 text-xs mt-2">⚠️ This is a PErc20Delegator (ERC20 token), not PEther (ETH)</div>
                          </div>
                        )}
                        {!isLoadingMarketInfo && !marketInfoError && !marketInfo && "Not available"}
                      </div>
                    </div>

                    {/* User Market Membership */}
                    {address && (
                      <div className="space-y-2">
                        <h4 className="text-sm font-medium text-muted-foreground">Your Market Membership</h4>
                        <div className="font-mono text-sm bg-muted p-2 rounded">
                          {isLoadingCheckMembership && "Loading..."}
                          {checkMembershipError && <span className="text-red-500">Error: {checkMembershipError.shortMessage}</span>}
                          {typeof checkMembership === 'boolean' && (
                            <div className={checkMembership ? "text-green-500" : "text-red-500"}>
                              PERC Market: {checkMembership ? "Entered" : "Not Entered"}
                            </div>
                          )}
                          {!isLoadingCheckMembership && !checkMembershipError && typeof checkMembership !== 'boolean' && "Not available"}
                        </div>
                      </div>
                    )}

                    {/* User's Assets In Protocol */}
                    {address && (
                      <div className="space-y-2">
                        <h4 className="text-sm font-medium text-muted-foreground">Your Assets in Protocol</h4>
                        <div className="font-mono text-sm bg-muted p-2 rounded max-h-32 overflow-y-auto">
                          {isLoadingAssetsIn && "Loading..."}
                          {assetsInError && <span className="text-red-500">Error: {assetsInError.shortMessage}</span>}
                          {assetsIn && Array.isArray(assetsIn) && assetsIn.length > 0 && (
                            <div className="space-y-1">
                              {assetsIn.map((asset, index) => (
                                <div key={index}>{String(asset)}</div>
                              ))}
                            </div>
                          )}
                          {assetsIn && Array.isArray(assetsIn) && assetsIn.length === 0 && "No assets entered"}
                          {!isLoadingAssetsIn && !assetsInError && !assetsIn && "Not available"}
                        </div>
                      </div>
                    )}
                  </CardContent>
                </Card>
              </AnimatedCard>

              {/* Contract Functions */}
              <AnimatedCard delay={0.1}>
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Search className="h-5 w-5" />
                      Available Contract Functions ({getContractFunctions().length})
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {/* Function Categories */}
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                        <div className="text-center p-3 bg-green-500/10 rounded-lg">
                          <div className="text-2xl font-bold text-green-500">
                            {getContractFunctions().filter(f => f.stateMutability === 'view').length}
                          </div>
                          <div className="text-sm text-muted-foreground">View Functions</div>
                        </div>
                        <div className="text-center p-3 bg-blue-500/10 rounded-lg">
                          <div className="text-2xl font-bold text-blue-500">
                            {getContractFunctions().filter(f => f.stateMutability === 'nonpayable').length}
                          </div>
                          <div className="text-sm text-muted-foreground">Write Functions</div>
                        </div>
                        <div className="text-center p-3 bg-purple-500/10 rounded-lg">
                          <div className="text-2xl font-bold text-purple-500">
                            {getContractFunctions().filter(f => f.stateMutability === 'payable').length}
                          </div>
                          <div className="text-sm text-muted-foreground">Payable Functions</div>
                        </div>
                      </div>

                      {/* Functions List */}
                      <div className="max-h-96 overflow-y-auto">
                        <Table>
                          <TableHeader>
                            <TableRow>
                              <TableHead className="w-[30%]">Function Name</TableHead>
                              <TableHead className="w-[20%]">Type</TableHead>
                              <TableHead className="w-[25%]">Inputs</TableHead>
                              <TableHead className="w-[25%]">Outputs</TableHead>
                            </TableRow>
                          </TableHeader>
                          <TableBody>
                            {getContractFunctions().map((func, index) => (
                              <TableRow key={index} className="group">
                                <TableCell className="font-mono text-sm">
                                  <div className="flex items-center gap-2">
                                    {func.stateMutability === 'view' && <Eye className="h-3 w-3 text-green-500" />}
                                    {func.stateMutability === 'nonpayable' && <Zap className="h-3 w-3 text-blue-500" />}
                                    {func.stateMutability === 'payable' && <CreditCard className="h-3 w-3 text-purple-500" />}
                                    {func.name}
                                  </div>
                                </TableCell>
                                <TableCell>
                                  <Badge 
                                    variant={func.stateMutability === 'view' ? 'secondary' : 'default'}
                                    className={cn(
                                      "text-xs",
                                      func.stateMutability === 'view' && "bg-green-500/10 text-green-500",
                                      func.stateMutability === 'nonpayable' && "bg-blue-500/10 text-blue-500",
                                      func.stateMutability === 'payable' && "bg-purple-500/10 text-purple-500"
                                    )}
                                  >
                                    {func.stateMutability}
                                  </Badge>
                                </TableCell>
                                <TableCell className="font-mono text-xs">
                                  {func.inputs.length === 0 ? (
                                    <span className="text-muted-foreground">none</span>
                                  ) : (
                                    <div className="space-y-1">
                                      {func.inputs.slice(0, 2).map((input, i) => (
                                        <div key={i} className="truncate">
                                          {input.name || `param${i}`}: {input.type}
                                        </div>
                                      ))}
                                      {func.inputs.length > 2 && (
                                        <div className="text-muted-foreground">+{func.inputs.length - 2} more</div>
                                      )}
                                    </div>
                                  )}
                                </TableCell>
                                <TableCell className="font-mono text-xs">
                                  {func.outputs.length === 0 ? (
                                    <span className="text-muted-foreground">none</span>
                                  ) : (
                                    <div className="space-y-1">
                                      {func.outputs.slice(0, 2).map((output, i) => (
                                        <div key={i} className="truncate">
                                          {output.name || `return${i}`}: {output.type}
                                        </div>
                                      ))}
                                      {func.outputs.length > 2 && (
                                        <div className="text-muted-foreground">+{func.outputs.length - 2} more</div>
                                      )}
                                    </div>
                                  )}
                                </TableCell>
                              </TableRow>
                            ))}
                          </TableBody>
                        </Table>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </AnimatedCard>

              {/* Connection Status */}
              <AnimatedCard delay={0.2}>
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Globe className="h-5 w-5" />
                      Connection Status
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <h4 className="text-sm font-medium text-muted-foreground">Wallet Status</h4>
                        <div className={cn(
                          "px-3 py-2 rounded-lg text-sm font-medium",
                          isConnected ? "bg-green-500/10 text-green-500" : "bg-red-500/10 text-red-500"
                        )}>
                          {isConnecting ? "Connecting..." : isConnected ? "Connected" : "Not Connected"}
                        </div>
                      </div>
                      
                      <div className="space-y-2">
                        <h4 className="text-sm font-medium text-muted-foreground">Network</h4>
                        <div className={cn(
                          "px-3 py-2 rounded-lg text-sm font-medium",
                          chain?.id === soneiumMinato.id ? "bg-green-500/10 text-green-500" : "bg-amber-500/10 text-amber-500"
                        )}>
                          {chain ? `${chain.name} (${chain.id})` : "No Network"}
                        </div>
                      </div>

                      {address && (
                        <div className="space-y-2 md:col-span-2">
                          <h4 className="text-sm font-medium text-muted-foreground">Connected Address</h4>
                          <div className="font-mono text-sm bg-muted p-2 rounded break-all">
                            {address}
                          </div>
                        </div>
                      )}
                    </div>
                  </CardContent>
                </Card>
              </AnimatedCard>

              {/* Troubleshooting Guide */}
              <AnimatedCard delay={0.3}>
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <HelpCircle className="h-5 w-5" />
                      Troubleshooting Guide
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      <div className="p-4 bg-blue-500/10 rounded-lg border border-blue-500/20">
                        <h4 className="font-semibold text-blue-500 mb-2">Understanding the Flow</h4>
                        <div className="text-sm space-y-2">
                          <p><strong>1. Enter Market:</strong> First, you need to enter the market using <code className="bg-muted px-1 rounded">enterMarkets([pTokenAddress])</code></p>
                          <p><strong>2. Supply/Mint:</strong> Then you can supply tokens to mint pTokens using the pToken's <code className="bg-muted px-1 rounded">mint()</code> function</p>
                          <p><strong>3. Enable Collateral:</strong> The market entry automatically enables the asset as collateral</p>
                          <p><strong>4. Borrow:</strong> Once you have collateral, you can borrow against it</p>
                        </div>
                      </div>

                      <div className="p-4 bg-amber-500/10 rounded-lg border border-amber-500/20">
                        <h4 className="font-semibold text-amber-500 mb-2">Common Issues</h4>
                        <div className="text-sm space-y-2">
                          <p><strong>Mint Reverted:</strong> Check if you have enough underlying tokens and if the market is properly listed</p>
                          <p><strong>Not in Market:</strong> Use <code className="bg-muted px-1 rounded">enterMarkets()</code> before trying to mint</p>
                          <p><strong>No Liquidity:</strong> Ensure you've successfully minted pTokens before trying to borrow</p>
                        </div>
                      </div>

                      <div className="p-4 bg-green-500/10 rounded-lg border border-green-500/20">
                        <h4 className="font-semibold text-green-500 mb-2">Key Functions for PERC Token</h4>
                        <div className="text-sm space-y-2">
                          <p><strong>Controller:</strong> <code className="bg-muted px-1 rounded">enterMarkets(["0x1DCb19949fC0a68cbdAa53Cce898B60D7436b14F"])</code></p>
                          <p><strong>pToken:</strong> <code className="bg-muted px-1 rounded">mint(amount)</code> - Supply PERC to get pPERC</p>
                          <p><strong>Check Status:</strong> <code className="bg-muted px-1 rounded">checkMembership(user, pToken)</code></p>
                          <p><strong>Get Liquidity:</strong> <code className="bg-muted px-1 rounded">getAccountLiquidity(user)</code></p>
                        </div>
                      </div>

                      {/* Current Status Summary */}
                      {address && (
                        <div className="p-4 bg-purple-500/10 rounded-lg border border-purple-500/20">
                          <h4 className="font-semibold text-purple-500 mb-2">Your Current Status</h4>
                          <div className="text-sm space-y-1">
                            <p>Market Membership: {typeof checkMembership === 'boolean' ? (checkMembership ? "✅ Entered" : "❌ Not Entered") : "Loading..."}</p>
                            <p>Account Liquidity: {accountLiquidityData ? `$${(Number(accountLiquidityData[1]) / 1e18).toFixed(2)}` : "Loading..."}</p>
                            <p>Assets in Protocol: {assetsIn && Array.isArray(assetsIn) ? assetsIn.length : "Loading..."}</p>
                          </div>
                        </div>
                      )}

                      {/* Step-by-Step Implementation */}
                      {address && (
                        <div className="p-4 bg-gradient-to-r from-blue-500/10 to-green-500/10 rounded-lg border border-blue-500/20">
                          <h4 className="font-semibold text-blue-500 mb-3">🚀 Step-by-Step Implementation</h4>
                          
                          {/* Important Notice */}
                          <div className="mb-4 p-3 bg-amber-500/10 border border-amber-500/20 rounded-lg">
                            <h5 className="font-semibold text-amber-500 mb-2">⚠️ Important: This is a PERC Token Market</h5>
                            <p className="text-sm text-muted-foreground">
                              The contract at 0x1DCb...b14F is a <strong>PErc20Delegator</strong> for PERC tokens, not ETH. 
                              You need PERC tokens (at 0x28fE...cD15) to mint pPERC tokens.
                            </p>
                          </div>
                          
                          {/* Step 1: Enter Market */}
                          <div className="space-y-3 mb-4">
                            <div className="flex items-center gap-2">
                              <div className="w-6 h-6 rounded-full bg-blue-500 text-white text-xs flex items-center justify-center font-bold">1</div>
                              <h5 className="font-semibold">Enter PERC Market</h5>
                              {typeof checkMembership === 'boolean' && checkMembership && <Badge className="bg-green-500/10 text-green-500">✅ Completed</Badge>}
                            </div>
                            <p className="text-sm text-muted-foreground ml-8">
                              First, you need to enter the PERC market to enable interactions with the pPERC token.
                            </p>
                            <div className="ml-8">
                              <Button
                                onClick={() => {
                                  if (!isDemoMode && address && chain) {
                                    enterMarkets({
                                      address: peridottrollerAddressSoneiumMinato,
                                      abi: PeridottrollerABI,
                                      functionName: 'enterMarkets',
                                      args: [[pTokenAddress]],
                                      chain: chain,
                                      account: address,
                                    });
                                  }
                                }}
                                disabled={isDemoMode || !address || !chain || (typeof checkMembership === 'boolean' && checkMembership) || isLoadingEnterMarketsTx}
                                className="bg-blue-500 hover:bg-blue-600"
                              >
                                {isLoadingEnterMarketsTx ? (
                                  <>
                                    <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                                    Entering Market...
                                  </>
                                ) : (
                                  <>
                                    <Zap className="h-4 w-4 mr-2" />
                                    Enter PERC Market
                                  </>
                                )}
                              </Button>
                              {isDemoMode && (
                                <p className="text-xs text-amber-500 mt-1">Switch to Live Mode to execute transactions</p>
                              )}
                              {typeof checkMembership === 'boolean' && checkMembership && (
                                <p className="text-xs text-green-500 mt-1">✅ You're already in the PERC market!</p>
                              )}
                            </div>
                          </div>

                          {/* Step 2: Mint PERC Tokens */}
                          <div className="space-y-3 mb-4">
                            <div className="flex items-center gap-2">
                              <div className="w-6 h-6 rounded-full bg-orange-500 text-white text-xs flex items-center justify-center font-bold">2</div>
                              <h5 className="font-semibold">Mint PERC Tokens</h5>
                              {percBalance && Number(percBalance) > 0 && <Badge className="bg-green-500/10 text-green-500">✅ You have PERC tokens</Badge>}
                            </div>
                            <p className="text-sm text-muted-foreground ml-8">
                              Mint PERC tokens from the testnet contract to use in the protocol.
                            </p>
                            <div className="ml-8 space-y-2">
                              <div className="p-3 bg-blue-500/10 rounded-lg">
                                <p className="text-sm">
                                  <strong>PERC Token Address:</strong> <code className="bg-muted px-1 rounded">0x28fE679719e740D15FC60325416bB43eAc50cD15</code>
                                </p>
                                <div className="mt-2 flex items-center gap-2">
                                  <span className="text-sm">Your PERC Balance:</span>
                                  {isLoadingPercBalance && <span className="text-sm">Loading...</span>}
                                  {percBalanceError && <span className="text-sm text-red-500">Error loading balance</span>}
                                  {percBalance && (
                                    <span className="text-sm font-medium">
                                      {(Number(percBalance) / 1e18).toFixed(4)} PERC
                                    </span>
                                  )}
                                </div>
                              </div>
                              
                              <div className="flex items-center gap-2">
                                <input
                                  type="number"
                                  placeholder="1000"
                                  step="100"
                                  min="0"
                                  className="px-3 py-2 border rounded-md text-sm w-32"
                                  id="perc-mint-amount"
                                  disabled={isDemoMode || !address || !chain}
                                />
                                <span className="text-sm font-medium">PERC</span>
                                <Button
                                  onClick={() => {
                                    const input = document.getElementById('perc-mint-amount') as HTMLInputElement;
                                    const amount = parseFloat(input.value);
                                    if (!isDemoMode && address && chain && amount > 0) {
                                      mintPerc({
                                        address: percTokenAddressSoneiumMinato,
                                        abi: ERC20ABI,
                                        functionName: 'mint',
                                        args: [address, BigInt(Math.round(amount * 1e18))],
                                        chain: chain,
                                        account: address,
                                      });
                                    }
                                  }}
                                  disabled={isDemoMode || !address || !chain || isLoadingMintPercTx}
                                  className="bg-orange-500 hover:bg-orange-600"
                                >
                                  {isLoadingMintPercTx ? (
                                    <>
                                      <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                                      Minting...
                                    </>
                                  ) : (
                                    <>
                                      <Plus className="h-4 w-4 mr-2" />
                                      Mint PERC
                                    </>
                                  )}
                                </Button>
                              </div>
                              
                              {isDemoMode && (
                                <p className="text-xs text-amber-500">Switch to Live Mode to mint tokens</p>
                              )}
                              {isSuccessMintPercTx && (
                                <p className="text-xs text-green-500">✅ PERC tokens minted successfully!</p>
                              )}
                            </div>
                          </div>

                          {/* Step 3: Approve PERC Tokens */}
                          <div className="space-y-3 mb-4">
                            <div className="flex items-center gap-2">
                              <div className="w-6 h-6 rounded-full bg-purple-500 text-white text-xs flex items-center justify-center font-bold">3</div>
                              <h5 className="font-semibold">Approve PERC Tokens</h5>
                            </div>
                            <p className="text-sm text-muted-foreground ml-8">
                              Before minting pPERC, you need to approve the pPERC contract to spend your PERC tokens.
                            </p>
                            <div className="ml-8 p-3 bg-purple-500/10 rounded-lg">
                              <p className="text-sm">
                                Call <code className="bg-muted px-1 rounded">approve(spender, amount)</code> on the PERC token contract:
                              </p>
                              <ul className="text-xs text-muted-foreground mt-1 space-y-1">
                                <li>• <strong>spender:</strong> 0x1DCb19949fC0a68cbdAa53Cce898B60D7436b14F (pPERC contract)</li>
                                <li>• <strong>amount:</strong> Amount of PERC tokens you want to supply</li>
                              </ul>
                            </div>
                          </div>

                          {/* Step 4: Supply PERC to Mint pPERC */}
                          <div className="space-y-3">
                            <div className="flex items-center gap-2">
                              <div className="w-6 h-6 rounded-full bg-green-500 text-white text-xs flex items-center justify-center font-bold">4</div>
                              <h5 className="font-semibold">Supply PERC to Mint pPERC</h5>
                            </div>
                            <p className="text-sm text-muted-foreground ml-8">
                              Supply PERC tokens to the pPERC contract to mint pPERC tokens (no ETH value needed).
                            </p>
                            <div className="ml-8 space-y-2">
                              <div className="p-3 bg-red-500/10 border border-red-500/20 rounded-lg">
                                <p className="text-sm text-red-500 font-medium">❌ Previous Error Explained</p>
                                <p className="text-xs text-muted-foreground mt-1">
                                  You tried to send ETH to a PErc20Delegator contract, which only accepts ERC20 tokens (PERC), not ETH.
                                  That's why you got "cannot send value to fallback" error.
                                </p>
                              </div>
                              
                              <div className="p-3 bg-green-500/10 border border-green-500/20 rounded-lg">
                                <p className="text-sm text-green-500 font-medium">✅ Correct Approach</p>
                                <p className="text-xs text-muted-foreground mt-1">
                                  Call <code className="bg-muted px-1 rounded">mint(amount)</code> on the pPERC contract with <strong>no ETH value</strong>.
                                  The contract will transfer PERC tokens from your wallet (if approved).
                                </p>
                              </div>
                            </div>
                          </div>

                          {/* Current Status */}
                          <div className="mt-4 p-3 bg-muted rounded-lg">
                            <h6 className="font-semibold mb-2">Next Steps for You</h6>
                            <ol className="text-sm space-y-1 list-decimal list-inside">
                              <li>Get PERC tokens from the token contract (0x28fE...cD15)</li>
                              <li>Approve the pPERC contract to spend your PERC tokens</li>
                              <li>Call mint() on the pPERC contract (without sending ETH)</li>
                            </ol>
                          </div>
                        </div>
                      )}
                    </div>
                  </CardContent>
                </Card>
              </AnimatedCard>
            </div>
          </TabsContent>
        </Tabs>

        {/* Asset Detail Modal */} 
        <AnimatePresence>
          {selectedAsset && ( // Removed isDemoMode condition here to allow modal in live mode
            <AssetDetailCard
              asset={selectedAsset}
              onClose={handleCloseAssetDetail}
              isSupply={isDetailSupply}
              onTransaction={handleTransaction}
              isDemoMode={isDemoMode}
              focusAmountInput={focusAmountInputInModal}
              onAmountInputFocused={() => setFocusAmountInputInModal(false)}
            />
          )}
        </AnimatePresence>

        {/* Modal to confirm switching from Demo Mode */}
        <AnimatePresence>
         {showLiveModeComingSoon && (
           <motion.div
             className="fixed inset-0 z-[100] flex items-center justify-center bg-background/80 backdrop-blur-sm"
             initial={{ opacity: 0 }}
             animate={{ opacity: 1 }}
             exit={{ opacity: 0 }}
             onClick={handleCancelSwitchToLiveMode}
           >
             <motion.div
               className="bg-card border border-border/50 rounded-xl shadow-xl p-6 w-full max-w-sm"
               initial={{ scale: 0.9, opacity: 0 }}
               animate={{ scale: 1, opacity: 1 }}
               exit={{ scale: 0.9, opacity: 0 }}
               transition={{ type: "spring", damping: 20, stiffness: 250 }}
               onClick={(e) => e.stopPropagation()}
             >
               <div className="flex items-center justify-between mb-4">
                 <h3 className="text-lg font-semibold">Switch to Live Mode?</h3>
                 <Button variant="ghost" size="icon" className="rounded-full h-7 w-7 -mr-2" onClick={handleCancelSwitchToLiveMode}>
                   <X className="h-4 w-4" />
                 </Button>
               </div>
               <p className="text-sm text-muted-foreground mb-5">
                 Live Mode with real on-chain data and transactions is currently under development.
                 Are you sure you want to switch? You won't be able to interact with the platform.
               </p>
               <div className="flex gap-3">
                 <Button variant="outline" onClick={handleCancelSwitchToLiveMode} className="flex-1">
                   Stay in Demo
                 </Button>
                 <Button onClick={handleConfirmSwitchToLiveMode} className="flex-1 bg-primary hover:bg-primary/90">
                   Switch to Live
                 </Button>
               </div>
             </motion.div>
           </motion.div>
         )}
       </AnimatePresence>

      </div>
    </TooltipProvider>
  )
}

// Extract all function names from the ABI for troubleshooting
const getContractFunctions = () => {
  return PeridottrollerABI
    .filter(item => item.type === 'function')
    .map(func => ({
      name: func.name,
      inputs: func.inputs || [],
      outputs: func.outputs || [],
      stateMutability: func.stateMutability
    }))
    .sort((a, b) => a.name.localeCompare(b.name));
};

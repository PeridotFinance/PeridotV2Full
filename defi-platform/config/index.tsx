import { cookieStorage, createStorage } from 'wagmi'
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'
import { SolanaAdapter } from '@reown/appkit-adapter-solana/react'
import { mainnet, arbitrum, solana, solanaTestnet, solanaDevnet } from '@reown/appkit/networks'
import { supportedNetworks } from './networks'
import type { Chain } from 'viem'

// Read Project ID from environment variables
// Using NEXT_PUBLIC_PROJECT_ID based on reown-appkit.md.
// Ensure this matches your .env.local setup.
export const projectId = process.env.NEXT_PUBLIC_PROJECT_ID

// Ensure Project ID is defined at build time
if (!projectId) {
  throw new Error('NEXT_PUBLIC_PROJECT_ID is not defined. Please set it in .env.local')
}

// Define supported EVM networks, including both mainnet networks and our supported testnets
export const evmNetworks: [Chain, ...Chain[]] = [mainnet, arbitrum, ...supportedNetworks]

// Define supported Solana networks
export const solanaNetworks = [solana, solanaTestnet, solanaDevnet]

// Create the Wagmi adapter instance for EVM support
export const wagmiAdapter = new WagmiAdapter({
  storage: createStorage({ storage: cookieStorage }), // Use cookieStorage for SSR
  ssr: true, // Enable SSR support
  projectId,
  networks: evmNetworks, // Only EVM networks for Wagmi
})

// Create the Solana adapter instance
export const solanaAdapter = new SolanaAdapter()

// Export the Wagmi config generated by the adapter
export const config = wagmiAdapter.wagmiConfig

// Get projectId from https://cloud.reown.com
export const projectIdFromReown = process.env.NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID

if (!projectIdFromReown) {
  throw new Error('Project ID is not defined in .env.local')
}

export const networksFromReown = [...evmNetworks, ...solanaNetworks]

// Set up the Wagmi Adapter (Config)
export const wagmiAdapterFromReown = new WagmiAdapter({
  // Using cookieStorage for SSR compatibility
  storage: createStorage({
    storage: cookieStorage
  }),
  ssr: true, // Enable SSR support
  projectId: projectIdFromReown,
  networks: evmNetworks // Only EVM networks for Wagmi
})

// Export the underlying wagmi config for the WagmiProvider
export const wagmiConfigFromReown = wagmiAdapterFromReown.wagmiConfig 
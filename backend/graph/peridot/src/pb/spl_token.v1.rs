// @generated
// This file is @generated by prost-build.
/// Wrapper message containing a list of mint or burn events
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MintOrBurnEvents {
    #[prost(message, repeated, tag="1")]
    pub events: ::prost::alloc::vec::Vec<MintOrBurnEvent>,
}
/// Represents a single mint or burn event
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MintOrBurnEvent {
    /// Transaction ID where the event occurred
    #[prost(string, tag="1")]
    pub tx_signature: ::prost::alloc::string::String,
    /// Block number
    #[prost(uint64, tag="2")]
    pub block_slot: u64,
    /// Unix timestamp of the block
    #[prost(int64, tag="3")]
    pub block_time: i64,
    /// Index of the mint/burn instruction within the transaction
    #[prost(uint32, tag="4")]
    pub instruction_index: u32,
    /// Enum indicating MINT or BURN
    #[prost(enumeration="EventType", tag="5")]
    pub event_type: i32,
    /// Should be the SPL Token Program ID
    #[prost(string, tag="6")]
    pub program_id: ::prost::alloc::string::String,
    /// The token mint address (e.g., address of USDC)
    #[prost(string, tag="7")]
    pub mint_account: ::prost::alloc::string::String,
    /// The specific token account being minted to or burned from
    #[prost(string, tag="8")]
    pub token_account: ::prost::alloc::string::String,
    /// The authority that signed for the mint/burn (mint authority or token account owner/delegate)
    #[prost(string, tag="9")]
    pub authority: ::prost::alloc::string::String,
    /// The amount of tokens minted or burned (raw u64)
    #[prost(uint64, tag="10")]
    pub amount: u64,
}
/// Enum to differentiate between Mint and Burn events
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EventType {
    Unknown = 0,
    Mint = 1,
    Burn = 2,
}
impl EventType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            EventType::Unknown => "UNKNOWN",
            EventType::Mint => "MINT",
            EventType::Burn => "BURN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN" => Some(Self::Unknown),
            "MINT" => Some(Self::Mint),
            "BURN" => Some(Self::Burn),
            _ => None,
        }
    }
}
// @@protoc_insertion_point(module)

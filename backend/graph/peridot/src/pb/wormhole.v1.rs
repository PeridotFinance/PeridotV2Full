// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WormholeEvents {
    #[prost(message, repeated, tag="1")]
    pub events: ::prost::alloc::vec::Vec<WormholeEvent>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WormholeEvent {
    #[prost(string, tag="1")]
    pub tx_signature: ::prost::alloc::string::String,
    #[prost(uint64, tag="2")]
    pub block_slot: u64,
    #[prost(int64, tag="3")]
    pub block_time: i64,
    #[prost(enumeration="InstructionType", tag="4")]
    pub instruction_type: i32,
    /// Index of this instruction in the transaction
    #[prost(uint32, tag="5")]
    pub instruction_index: u32,
    /// Specific event data
    #[prost(oneof="wormhole_event::EventData", tags="6, 7, 8")]
    pub event_data: ::core::option::Option<wormhole_event::EventData>,
}
/// Nested message and enum types in `WormholeEvent`.
pub mod wormhole_event {
    /// Specific event data
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum EventData {
        #[prost(message, tag="6")]
        PostedMessage(super::PostedMessageData),
        #[prost(message, tag="7")]
        PostedVaa(super::PostedVaaData),
        #[prost(message, tag="8")]
        PostedMessageUnreliable(super::PostedMessageUnreliableData),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PostedMessageData {
    /// The account that initiated the message (from transaction accounts)
    #[prost(string, tag="1")]
    pub emitter: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub nonce: u32,
    #[prost(bytes="vec", tag="3")]
    pub payload: ::prost::alloc::vec::Vec<u8>,
    /// 0 for Confirmed, 1 for Finalized
    #[prost(uint32, tag="4")]
    pub consistency_level: u32,
    /// Payer of the transaction fee for this instruction
    #[prost(string, tag="5")]
    pub payer: ::prost::alloc::string::String,
}
/// For PostMessageUnreliable, structure is the same as PostMessage
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PostedMessageUnreliableData {
    #[prost(string, tag="1")]
    pub emitter: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub nonce: u32,
    #[prost(bytes="vec", tag="3")]
    pub payload: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag="4")]
    pub consistency_level: u32,
    #[prost(string, tag="5")]
    pub payer: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PostedVaaData {
    /// VAA Header fields
    #[prost(uint32, tag="1")]
    pub version: u32,
    #[prost(uint32, tag="2")]
    pub guardian_set_index: u32,
    /// VAA Body fields
    ///
    /// Renamed to avoid conflict with block_time
    #[prost(uint32, tag="3")]
    pub vaa_timestamp: u32,
    /// Renamed to avoid conflict
    #[prost(uint32, tag="4")]
    pub vaa_nonce: u32,
    #[prost(uint32, tag="5")]
    pub emitter_chain: u32,
    /// This is typically \[u8; 32\]
    #[prost(bytes="vec", tag="6")]
    pub emitter_address: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag="7")]
    pub sequence: u64,
    #[prost(uint32, tag="8")]
    pub consistency_level: u32,
    #[prost(bytes="vec", tag="9")]
    pub payload: ::prost::alloc::vec::Vec<u8>,
    /// Payer of the transaction fee for this instruction
    #[prost(string, tag="10")]
    pub payer: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum InstructionType {
    Unspecified = 0,
    PostMessage = 1,
    PostVaa = 2,
    PostMessageUnreliable = 3,
}
impl InstructionType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            InstructionType::Unspecified => "UNSPECIFIED",
            InstructionType::PostMessage => "POST_MESSAGE",
            InstructionType::PostVaa => "POST_VAA",
            InstructionType::PostMessageUnreliable => "POST_MESSAGE_UNRELIABLE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNSPECIFIED" => Some(Self::Unspecified),
            "POST_MESSAGE" => Some(Self::PostMessage),
            "POST_VAA" => Some(Self::PostVaa),
            "POST_MESSAGE_UNRELIABLE" => Some(Self::PostMessageUnreliable),
            _ => None,
        }
    }
}
// @@protoc_insertion_point(module)
